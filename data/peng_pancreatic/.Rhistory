setwd('Documents/school/thesis/new_data/')
df = readRDS('bioconductor_pkg/data/CRA001160/CRA001160_expression.Rdata')
row.names(df)
col.names(df)
colnames(df)
typeof(df)
class(df)
df = readRDS('bioconductor_pkg/data/GSE84465/GSE84465_expression.rds')
View(df)
df = readRDS('bioconductor_pkg/data/GSE121861/GSE121861_expression.RData')
View(df)
df = readRDS('bioconductor_pkg/data/GSE132172/GSE132172_expression.rds')
View(df)
BiocManager::install("DropletUtils")
library(DropletUtils)
library(Seurat)
df = readRDS('patel_glioblastoma/GSE57872/GSE57872_expression.rds')
View(df)
dfm = as.matrix(df)
seurat.obj = CreateSeuratObject(counts = dfm, project = 'patel')
dir.create('patel_glioblastoma/GSE57872/MTX')
write10xCounts(path='patel_glioblastoma/GSE57872/MTX/', x=seurat.obj@assays[["RNA"]]@data, gene.type="Gene Expression", overwrite = T, type = "sparse", version = "3")
View(dfm)
tdfm = Read10X(data.dir = 'patel_glioblastoma/GSE57872/MTX/')
View(tdfm)
tdf = as.matrix(tdfm)
tdf2 = as.data.frame(tdf2)
tdf2 = as.data.frame(tdf)
saveRDS(tdfm, 'patel_glioblastoma/GSE57872/MTX/expr.rds')
tdfm = readRDS('patel_glioblastoma/GSE57872/MTX/expr.rds')
View(as.matrix(tdfm))
View(tdfm)
getwd()
getwd()
setwd()
setwd('~')
df = read.csv('Downloads/peng_markergene_info.csv', sep='\t')
df
View(df)
View(df$Supplementary.information..Table.S3..List.of.marker.information.for.each.cell.types.in.PDACs..Related.to.Figure.1[df$X.4 == 'Ductal cell 1'])
length(df$Supplementary.information..Table.S3..List.of.marker.information.for.each.cell.types.in.PDACs..Related.to.Figure.1[df$X.4 == 'Ductal cell 1'])
length(df$Supplementary.information..Table.S3..List.of.marker.information.for.each.cell.types.in.PDACs..Related.to.Figure.1)
newdf = data.frame()
newdf$Ductal_Cell_1 = df$Supplementary.information..Table.S3..List.of.marker.information.for.each.cell.types.in.PDACs..Related.to.Figure.1[df$X.4 == 'Ductal cell 1']
newdf['Ductal Cell 1'] = df$Supplementary.information..Table.S3..List.of.marker.information.for.each.cell.types.in.PDACs..Related.to.Figure.1[df$X.4 == 'Ductal cell 1']
dc1 = df$Supplementary.information..Table.S3..List.of.marker.information.for.each.cell.types.in.PDACs..Related.to.Figure.1[df$X.4 == 'Ductal cell 1']
dc2 = df$Supplementary.information..Table.S3..List.of.marker.information.for.each.cell.types.in.PDACs..Related.to.Figure.1[df$X.4 == 'Ductal cell 2']
levels(df$X.4)
levels(factor(df$X.4))
ac = df$Supplementary.information..Table.S3..List.of.marker.information.for.each.cell.types.in.PDACs..Related.to.Figure.1[df$X.4 == 'Acinar cell']
bc = df$Supplementary.information..Table.S3..List.of.marker.information.for.each.cell.types.in.PDACs..Related.to.Figure.1[df$X.4 == 'B cell']
endocrine = df$Supplementary.information..Table.S3..List.of.marker.information.for.each.cell.types.in.PDACs..Related.to.Figure.1[df$X.4 == 'Endocrine cell']
endothelial = df$Supplementary.information..Table.S3..List.of.marker.information.for.each.cell.types.in.PDACs..Related.to.Figure.1[df$X.4 == 'Endothelial cell']
fb = df$Supplementary.information..Table.S3..List.of.marker.information.for.each.cell.types.in.PDACs..Related.to.Figure.1[df$X.4 == 'Fibroblast']
mp = df$Supplementary.information..Table.S3..List.of.marker.information.for.each.cell.types.in.PDACs..Related.to.Figure.1[df$X.4 == 'Macrophage']
sc = df$Supplementary.information..Table.S3..List.of.marker.information.for.each.cell.types.in.PDACs..Related.to.Figure.1[df$X.4 == 'Stellate cell']
tc = df$Supplementary.information..Table.S3..List.of.marker.information.for.each.cell.types.in.PDACs..Related.to.Figure.1[df$X.4 == 'T cell']
l = list(ac, bc, dc1, dc2, endocrine, endothelial, fb, mp, sc, tc)
}
cfun <- function(L) {
pad.na <- function(x,len) {
c(x,rep(NA,len-length(x)))
}
maxlen <- max(sapply(L,length))
do.call(data.frame,lapply(L,pad.na,len=maxlen))
}
cfun(l)
df = cfun(l)
View(df)
df[[1]]
View(ac)
sdf = read.csv('Downloads/peng_markergene_info.csv', sep='\t')
levels(factor(sdf$X.4))
names = levels(factor(sdf$X.4))
View(names)
names[-3]
names = names[-3]
colnames(df)<-names
write.csv('Downloads/peng_markergene_formatted.tsv', sep='\t', row.names=F)
write.csv(df, 'Downloads/peng_markergene_formatted.tsv', sep='\t', row.names=F)
?write.csv
write.table(df, 'Downloads/peng_markergene_formatted.tsv', sep='\t', row.names=F)
df = read.table(file='Downloads/peng_markergene_formatted.tsv', sep='\t')
View(df)
df = read.table(file='Downloads/peng_markergene_formatted.tsv', sep='\t', header=T)
View(df)
saveRDS(df, 'Documents/school/thesis/new_data/bioconductor_pkg/data/CRA001160/CRA001160_signatures.rds')
?readMM
??readMM
library(matrix)
library(Matrix)
?readMM
df2 = readRDS('Documents/school/thesis/new_data/patel_glioblastoma/GSE57872/MTX/expr.rds')
writeMM(df2, 'Documents/school/thesis/new_data/patel_glioblastoma/GSE57872/sparseMM.mtx')
df3 = readMM('Documents/school/thesis/new_data/patel_glioblastoma/GSE57872/sparseMM.mtx')
View(df2)
View(df3)
library(Matrix)
?`dgCMatrix-class`
?`dgTMatrix-class`
?`dgCMatrix-class`
df = data.frame()
tdf = as.matrix(data.frame())
class(tdf)
View(tdf)
View(df)
df = readRDS('Documents/school/thesis/new_data/patel_glioblastoma/GSE57872/MTX/expr.rds')
class(df)
class(as.matrix(df))
?Matrix()
class(Matrix(df, sparse=F))
dfm = Matrix(df, sparse=F)
View(dfm)
typeof(df)
typeof(dfm)
typeof(as.matrix(df))
remove.packages('TMExplorer')
remove.packages('TMExplorer')
library(TMExplorer)
res = queryTME(geo_accession = 'CRA001160', sparse = T)[[1]]
res$expression
df = readRDS('Documents/school/thesis/new_data/bioconductor_pkg/data/CRA001160/expression_CRA001160.rds')
View(head(df))
head(res$expression)
View(head(res$expression))
View(as.matrix(head(res$expression)))
df = readRDS('Documents/school/thesis/new_data/bioconductor_pkg/data/CRA001160/CRA001160_expression_matrix.rds')
format(object.size(df), units='MB')
format(object.size(df), units='GB')
View(head(df))
df = readRDS('Documents/school/thesis/new_data/bioconductor_pkg/data/CRA001160/CRA001160_expression_sparse.rds')
class(df)
df = readRDS('Documents/school/thesis/new_data/patel_glioblastoma/GSE57872/GSE57872_expression.rds')
library(TMExplorer)
res = queryTME(geo_accession = 'CRA001160', sparse = T)[[1]]
format(object.size(res), units = 'MB')
list = kc('counts')
list = c('counts')
length(list)
for (item in list){item}
for (item in list){print(item)}
list <- c(list, 'tpm', 'fpkm')
for (item in list){print(item)}
?list
?vector
if (length(list)>1){print('true')}
list[2:]
list[[2:]]
list[2]
list[2:]
list[2:length(list)]
list[-1]
list[-2]
list[-1]
names(list)
names(list) <- c('counts', 'tpm', 'fpkm')
names(list)
list
seq_along(2,length(list))
seq_along(length(list))
?seq_along
seq(2,length(list))
seq(0),length(list))
seq(0,length(list))
library(TMExplorer)
met = queryTME(has_truth = T, metadata_only = T)[[1]]
for (row in seq_len(nrow(met))){
if (row != 1 && row != 3 && row != 5 && row !=9){
print(met[row, 'Reference'])
print(table(colData(queryTME(geo_accession = met[row, 'accession'],sparse = T)[[1]])$label))
}
}
clabels = readRDS('Documents/school/thesis/new_data/chung_breast/GSE75688/GSE75688_cell_types.rds')
length(clabels)
length(clabels$cell)
llabels = read.csv('Documents/school/thesis/new_data/lambrechts_lung_carcinoma/E-MTAB-6149_cell_types.csv')
View(llabels)
length(llabels$cell)
lcells = readRDS('Documents/school/thesis/new_data/lambrechts_lung_carcinoma/E-MTAB-6149_expr_sparse.rds')
length(colnames(lcells))
llabels$X <- NULL
saveRDS(llabels, 'Documents/school/thesis/new_data/lambrechts_lung_carcinoma/E-MTAB-6149_cell_types.rds')
lsigs = read.table('Documents/school/thesis/new_data/lambrechts_lung_carcinoma/etmab6149/E-MTAB-6149_signatures.csv',header = T,sep='\t')
View(lsigs)
saveRDS(lsigs, 'Documents/school/thesis/new_data/lambrechts_lung_carcinoma/etmab6149/E-MTAB-6149_signatures.rds')
lsigs2 = readRDS('Documents/school/thesis/new_data/lambrechts_lung_carcinoma/etmab6149/E-MTAB-6149_signatures.rds')
library(c(cellassign, scran, optparse, data.table, gtools))
suppressPackageStartupMessages(library(cellassign))
suppressPackageStartupMessages(library(scran))
suppressPackageStartupMessages(library(data.table))
input.matrix <- as.matrix(data.frame(fread('Downloads/research/cellassign_script/crc/expr.tsv', check.names = F), row.names=1, check.names = F))
View(input.matrix)
size.factors <- calculateSumFactors(input.matrix, min.mean = 1)
marker.matrix <- as.matrix(data.frame(fread('Downloads/research/cellassign_script/crc/markers_bin.csv', check.names = F), row.names = 1, check.names = F))
marker.matrix <- as.matrix(data.frame(fread(InputMarkers, check.names = F), row.names = 1, check.names = F))
input.matrix.final <- t(as.matrix(input.matrix[as.character(row.names(marker.matrix)),]))
cell.fit <- cellassign(exprs_obj = input.matrix.final, marker_gene_info = marker.matrix,s = size.factors,learning_rate = 0.01, verbose = F)
cell.results <- data.frame(celltypes(cell.fit))
row.names(cell.results) <- row.names(input.matrix.final)
write.table(cell.results, 'Downloads/research/cellassign_script/crc/crc.CellAssign_annotations.tsv', sep='\t', quote = F)
df <- fread('Downloads/research/cellassign_script/crc/crc.CellAssign_annotations.tsv')
View(df)
View(cell.results)
cell.results <- data.frame(celltypes(cell.fit))
colnames(cell.results)
colnames(cell.results)[[1]] <- "annotation"
outdf <- data.frame(row.names(input.matrix.final), celltypes(cell.fit))
View(outdf)
colnames(outdf) <- c('cell', 'annotation')
exit
quit()
library(Seurat)
input.matrix <- Read10X(data.dir = 'Documents/school/thesis/new_data/crc/GSE81861/MTX/')
df <- t(input.matrix)
df <- base::t(input.matrix)
coerce(from = 'dgCMatrix', to = 'matrix')
dense.input.matrix <- as.matrix(Read10X(data.dir = 'Documents/school/thesis/new_data/crc/GSE81861/MTX/'))
df <- t(dense.input.matrix)
View(df)
dense.input.matrix <- as.matrix(Read10X(data.dir = 'Documents/school/thesis/new_data/crc/GSE81861/MTX/'))
library(Seurat)
dense.input.matrix <- as.matrix(Read10X(data.dir = 'Documents/school/thesis/new_data/crc/GSE81861/MTX/'))
input.matrix <- <- as.matrix(data.frame(fread('Downloads/research/cellassign_script/crc/expr.tsv', check.names = F), row.names=1, check.names = F))
input.matrix <- as.matrix(data.frame(fread('Downloads/research/cellassign_script/crc/expr.tsv', check.names = F), row.names=1, check.names = F))
library(data.table)
input.matrix <- as.matrix(data.frame(fread('Downloads/research/cellassign_script/crc/expr.tsv', check.names = F), row.names=1, check.names = F))
View(dense.input.matrix)
View(input.matrix)
df <- fread('Documents/school/thesis/new_data/crc/GSE81861/MTX/barcodes.tsv.gz')
View(df)
df <- fread('Documents/school/thesis/new_data/crc/GSE81861/MTX/features.tsv.gz')
View(input.matrix)
seurat.object  <- CreateSeuratObject(counts = input.matrix, project = 'crc_cellassign')
write10xCounts(path = 'Downloads/research/cellassign_script/crc/MTX/', x = seurat.object@assays[["RNA"]]@data, gene.type="Gene Expression", overwrite=T, type="sparse", version="3")
library(DropletUtils)
write10xCounts(path = 'Downloads/research/cellassign_script/crc/MTX/', x = seurat.object@assays[["RNA"]]@data, gene.type="Gene Expression", overwrite=T, type="sparse", version="3")
dense.input.matrix <- as.matrix(Read10X(data.dir = 'Downloads/research/cellassign_script/crc/MTX/'))
View(dense.input.matrix)
quit()
df <- readRDS('Documents/school/thesis/new_data/bioconductor_pkg/data/GSE116256/GSE116256_expr_indexed.rds')
df2 <- readRDS('Documents/school/thesis/new_data/bioconductor_pkg/data/GSE116256/GSE116256_expression.rds')
View(df)
colnames(df2)
colnames(df2) == colnames(df)
write.table(df, file = 'Documents/school/research/scrnaseq_data/van_galen_aml/raw/counts.tsv.xz', quote = F, sep='\t')
write.table(df, file =xzfile('Documents/school/research/scrnaseq_data/van_galen_aml/raw/counts.tsv.xz'), quote = F, sep='\t')
quit()
df = readRDS('Downloads/vangalen_aml(1)/vangalen_aml/vangalen_counts.rds')
write.csv(df, xzfile('Documents/school/research/scrnaseq_data/van_galen_aml/raw/counts.tsv.xz', compression = 9), sep='\t', quote = F)
write.table(df, xzfile('Documents/school/research/scrnaseq_data/van_galen_aml/raw/counts.tsv.xz', compression = 9), sep='\t', quote = F)
quit()
df = readRDS('Downloads/vangalen_aml(1)/vangalen_aml/vangalen_cellanno.rds')
write.csv(df, 'Documents/school/research/scrnaseq_data/van_galen_aml/van_galen_cell_annotations.csv', quote = F)
quit()
exit
quit()
library(TMExplorer)
res2 = queryTME(author = 'Lambrechts', sparse = T)
res2 = queryTME(author = 'Lambrechts', sparse = F)
res2[[1]]
res = queryTME(author = 'Lambrechts', sparse = F)
readRDS('Documents/school/te')
readRDS('Documents/school/thesis/new_data/lambrechts_lung_carcinoma/etmab6149/E-MTAB-6149_expression.rds')
res = readRDS('Documents/school/thesis/new_data/lambrechts_lung_carcinoma/etmab6149/E-MTAB-6149_expression.rds')
format(object.size(res)-object.size(res2),units='Mb')
quit()
library(Seurat)
data = readRDS('Documents/school/thesis/new_data/jerby_arnon_melanoma/GSE115978/GSE115978_expr_index.rds')
seurat.data <- CreateSeuratObject(counts = data, project='tsne')
res <- RunTSNE(seurat.data)
seurat.data <- NormalizeData(seurat.data)
seurat.data <- FindVariableFeatures(seurat.data)
all.genes <- rownames(seurat.data)
seurat.data <- ScaleData(seurat.data, features = all.genes)
seurat.data <- RunPCA(seurat.data, features = VariableFeatures(seurat.data))
res <- RunTSNE(seurat.data)
seurat.data <- FindNeighbors(seurat.data)
seurat.data <- FindClusters(seurat.data)
res <- RunTSNE(seurat.data)
res <- RunTSNE(seurat.data, check_duplicates =F)
DimPlot(res, reduction = 'tsne')
data = readRDS('Documents/school/thesis/new_data/jerby_arnon_melanoma/GSE115978/GSE115978_expr_index.rds')
seurat.data <- CreateSeuratObject(counts = data, project='tsne')
library(Seurat)
seurat.data <- NormalizeData(seurat.data)
seurat.data <- CreateSeuratObject(counts = data, project='tsne')
seurat.data <- NormalizeData(seurat.data)
seurat.data <- FindVariableFeatures(seurat.data)
all.genes <- rownames(seurat.data)
seurat.data <- ScaleData(seurat.data, features = all.genes)
seurat.data <- RunPCA(seurat.data, features = VariableFeatures(seurat.data))
seurat.data <- RunTSNE(seurat.data, check_duplicates =F)
DimPlot(seurat.data, reduction = 'tsne')
seurat.data <- FindNeighbors(seurat.data); seurat.data <- FindClusters(seurat.data)
seurat.data <- RunTSNE(seurat.data, check_duplicates =F)
DimPlot(seurat.data, reduction = 'tsne')
?DimPlot
DimPlot(seurat.data, reduction = 'tsne', label.size = 10)
DimPlot(seurat.data, reduction = 'tsne', label.size = 100)
DimPlot(seurat.data, reduction = 'tsne', pt.size = 100)
DimPlot(seurat.data, reduction = 'tsne', pt.size = 10)
DimPlot(seurat.data, reduction = 'tsne', pt.size = 5)
DimPlot(seurat.data, reduction = 'tsne', pt.size = 3)
DimPlot(seurat.data, reduction = 'tsne', pt.size = 1)
DimPlot(seurat.data, reduction = 'tsne', pt.size = 2)
DimPlot(seurat.data, reduction = 'tsne', pt.size = 2, label=T)
DimPlot(seurat.data, reduction = 'tsne', pt.size = 2)
library(Seurat)
data <- readRDS('Documents/school/thesis/new_data/jerby_arnon_melanoma/GSE115978/GSE115978_expr_index.rds')
seurat.data <- CreateSeuratObject(counts = data, project = 'tsne')
seurat.data <- NormalizeData(seurat.data)
seurat.data <- FindVariableFeatures(seurat.data)
all.genes <- rownames(seurat.data)
seurat.data <- ScaleData(seurat.data, features = all.genes)
seurat.data <- RunPCA(seurat.data, features = VariableFeatures(seurat.data))
seurat.data <- FindNeighbors(seurat.data)
seurat.data <- FindClusters(seurat.data)
seurat.data <- RunTSNE(seurat.data, check_duplicates = F)
DimPlot(seurat.data, reduction = 'tsne')
saveRDS(seurat.data, 'Downloads/figure4_tsne.RDS')
DimPlot(seurat.data, reduction = 'tsne', pt.size = 1)
DimPlot(seurat.data, reduction = 'tsne', pt.size = 0.5)
DimPlot(seurat.data, reduction = 'tsne', pt.size = 1)
quit()
library(Seurat)
seurat.data <- readRDS('Downloads/figure4_tsne.RDS')
meta <- read.csv('Documents/school/research/scrnaseq_data/jerby_arnon_melanoma/jerby_arnon_melanoma_clusters.csv')
View(meta)
for (i in 1:max(meta[,'paper'])){
#get cells in cluster and set idents in seurat
use_cells = meta[meta[,'paper'] == i,]$cell
Idents(seurat.data, cells=use_cells) <-i
}
DimPlot(seurat.data, reduction = 'tsne', pt.size = 1)
DimPlot(seurat.data, reduction = 'tsne', pt.size = 1)
quit()
setwd('Documents/school/research/scrnaseq_data/peng_pancreatic/')
load('CRA001160_expression.Rdata')
df <- readRDS('CRA001160_expression.Rdata')
df <- readRDS('expression_CRA001160.rds')
typeof(df)
df <- as.matrix(df)
row.names(df)
colnames(df)
write.table(df, 'raw/counts.tsv', sep='\t', quote = F)
